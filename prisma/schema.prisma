generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Application {
  id         Int      @default(autoincrement()) @id
  creatorId  Int
  campaignId Int
  status     Status   @default(PENDING)
  Campaign   Campaign @relation(fields: [campaignId], references: [id])
  Creator    Creator  @relation(fields: [creatorId], references: [id])
  createdAt  DateTime @default(now())
}

model Brand {
  id          Int        @default(autoincrement()) @id
  name        String
  description String
  logoUrl     String
  categoryId  Int
  createdAt   DateTime   @default(now())
  status      Status     @default(PENDING)
  Category    Category   @relation(fields: [categoryId], references: [id])
  Campaign    Campaign[]
}

model Campaign {
  id          Int           @default(autoincrement()) @id
  title       String
  imageUrl    String?
  startDate   DateTime
  endDate     DateTime
  description String
  brief       String
  brandId     Int
  categoryId  Int
  status      Status        @default(PENDING)
  createdAt   DateTime      @default(now())
  Brand       Brand         @relation(fields: [brandId], references: [id])
  Category    Category      @relation(fields: [categoryId], references: [id])
  Application Application[]
}

model Category {
  id       Int        @default(autoincrement()) @id
  name     String
  Brand    Brand[]
  Campaign Campaign[]
}

model Contact {
  id          Int      @default(autoincrement()) @id
  name        String
  email       String
  type        Role?
  message     String?
  companyName String?
  website     String?
  createdAt   DateTime @default(now())
}

model Creator {
  id           Int           @default(autoincrement()) @id
  displayName  String?
  location     String?
  instragramId String
  bio          String?
  advocates    String?
  status       Status        @default(PENDING)
  Application  Application[]
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

enum Role {
  BRAND
  CREATOR
}

enum Status {
  ACCEPTED
  EXPIRED
  PENDING
  REJECTED
}
